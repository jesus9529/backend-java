services:
  springboot-app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app  # Montar el código fuente en el contenedor
      - /app/.mvn  # Cache Maven
    ports:
      - "8080:8080"  # Mapear el puerto de desarrollo
    command: ["./mvnw", "spring-boot:run", "-Dspring-boot.run.profiles=dev"]
    environment:
      CORS_ALLOWED_ORIGINS: '*'
      CORS_ALLOWED_METHODS: '*'
      JAVA_OPTS: -Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      - postgres # Asegura que PostgreSQL esté disponible antes de iniciar la app
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
